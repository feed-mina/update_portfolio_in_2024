<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	게시판 > Q&A
-->

<mapper namespace="bbsQna">
	<sql id="sql_QnaList">
		SELECT 
			bbs_code
			, tcc.cmmn_code_nm
			, bbs_seq
			, bbs_se
			, bbs_sj
			, tu.user_nm
			, tu.user_seq
			, DATE_FORMAT(tbs.regist_dt, '%Y-%m-%d') AS regist_dt
			, tbs.use_at
			, (
				SELECT 
					tu2.user_nm 
				FROM tb_bbs tbs2
				INNER JOIN tb_user tu2 ON tu2.user_seq = tbs2.regist_id
				WHERE tbs2.upper_bbs_seq = tbs.bbs_seq
			) AS ans_nm
			, (
				SELECT 
					COUNT(1) 
				FROM tb_bbs tbs3 
				WHERE tbs3.upper_bbs_seq = tbs.bbs_seq
			) AS cnt
		FROM tb_bbs tbs
		INNER JOIN tb_cmmn_code tcc ON tcc.cmmn_code_etc = tbs.bbs_se
		INNER JOIN tb_user tu ON tu.user_seq = tbs.regist_id
		WHERE tbs.bbs_code = 'QNA' and tbs.upper_bbs_seq IS NULL
			<if test='@com.sch.util.CommonUtil@isNotEmpty(userSeq)'>
				AND tu.user_seq = #{userSeq}
			</if>
			<if test='@com.sch.util.CommonUtil@isNotEmpty(bbsSe)'>
				AND bbs_Se = #{bbsSe}
			</if>
			<if test='@com.sch.util.CommonUtil@isNotEmpty(searchText)'>
				AND (bbs_sj LIKE concat('%', #{searchText} , '%')
					OR bbs_cn LIKE concat('%', #{searchText} , '%'))
			</if>
		ORDER BY tbs.regist_dt DESC
	</sql>
	
	<select id="selectQnaListPaging" parameterType="map" resultType="camelHashMap">
      /* bbsQna.sql_QnaListPaging */
      <include refid="sql_QnaList"/>
      <include refid="common.PAGING"/>
  </select>
  
  <select id="selectQnaListPagingCount" parameterType="map" resultType="camelHashMap">
      /* bbsQna.sql_QnaListPagingCount */
      <include refid="common.COUNT_HEAD"/>
      <include refid="sql_QnaList"/>
      <include refid="common.COUNT_FOOT"/>
  </select>
  
  <select id="selectQnaDetail" parameterType="map" resultType="camelHashMap">
  	/* bbsQna.selectQnaDetail */
  	SELECT
  		bbs_code
  		, bbs_seq
  		, tcc.cmmn_code_nm
  		, bbs_se
  		, bbs_sj
  		, tu.user_nm
  		, tu.profl_image_cn
  		, DATE_FORMAT(tbs.regist_dt, '%Y-%m-%d') AS regist_dt
  		, tbs.use_at
		, tbs.regist_id
		, fn_usernm(tbs.regist_id) as regist_id_nm
  		, (
				SELECT 
					COUNT(1) 
				FROM tb_bbs tbs3 
				WHERE tbs3.upper_bbs_seq = tbs.bbs_seq
			) AS cnt
  		, bbs_cn
  		, (
				SELECT 
					tbs2.bbs_seq 
				FROM tb_bbs tbs2
				WHERE tbs2.upper_bbs_seq = tbs.bbs_seq
			) AS ans_seq
  		, (
				SELECT 
					tbs2.bbs_cn 
				FROM tb_bbs tbs2
				WHERE tbs2.upper_bbs_seq = tbs.bbs_seq
			) AS ans_cn
			, (
				SELECT 
					tbs2.regist_id 
				FROM tb_bbs tbs2
				WHERE tbs2.upper_bbs_seq = tbs.bbs_seq
			) AS ans_regist_id
  	FROM tb_bbs tbs
  	INNER JOIN tb_cmmn_code tcc ON tcc.cmmn_code_etc = tbs.bbs_se
  	INNER JOIN tb_user tu ON tu.user_seq = tbs.regist_id
  	WHERE bbs_seq = #{bbsSeq}
	  	<if test='@com.sch.util.CommonUtil@isNotEmpty(userSeq)'>
				AND tu.user_seq = #{userSeq}
			</if>
  </select>
  
  <insert id="upsertUserQna" parameterType="map">
    		/* bbsQna.upsertUserQna */
    		<selectKey resultType="String" keyProperty="bbsSeq" order="BEFORE">
            <!-- bbsSeq값이 NULL이면 seq생성, else PARAM값 -->
            SELECT fn_nextval('BBS')
        </selectKey>
        INSERT INTO tb_bbs
        (
        	bbs_code
        	, bbs_seq
        	, bbs_sj
        	, bbs_cn
        	, use_at
        	, bbs_se
        	, regist_id
        	, regist_dt
        )
        VALUES
        (
        	#{bbsCode}
        	, #{bbsSeq}
        	, #{bbsSj}
        	, #{bbsCn}
        	, #{useAt}
        	, #{bbsSe}
        	, #{user.userSeq}
        	, NOW()
        )
        ON DUPLICATE KEY UPDATE
	  		bbs_sj = #{bbsSj}
	  		, bbs_cn = #{bbsCn}
	  		, use_at = #{useAt}
	  		, bbs_se = #{bbsSe}
	  		, updt_id = #{user.userSeq}
	  		, updt_dt = NOW()
  </insert>
  
</mapper>
